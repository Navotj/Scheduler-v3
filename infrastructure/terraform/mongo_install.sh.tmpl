#!/bin/bash
set -euxo pipefail

# Log all output for debug
exec > >(tee /var/log/user_data.log | logger -t user-data -s 2>/dev/console) 2>&1

# Update package metadata
yum update -y

# Confirm required tools exist
command -v curl
command -v gpg2 || dnf install -y gnupg2

# Import MongoDB GPG key
curl -fsSL https://pgp.mongodb.com/server-8.0.asc | gpg2 --dearmor -o /etc/pki/rpm-gpg/mongodb-org-8.0.gpg

# Add MongoDB repo (Amazon Linux 2023)
cat <<'REPO' > /etc/yum.repos.d/mongodb-org-8.0.repo
[mongodb-org-8.0]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/amazon/2023/mongodb-org/8.0/x86_64/
gpgcheck=1
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/mongodb-org-8.0.gpg
REPO

# Install MongoDB and filesystem tools
dnf install -y mongodb-org xfsprogs awscli

# Prepare persistent EBS volume
DEVICE="/dev/xvdf"
MOUNT_POINT="/data/db"

# Format only if no filesystem exists
if ! blkid "$DEVICE" >/dev/null 2>&1; then
  mkfs.xfs "$DEVICE"
fi

# Create and mount the directory
mkdir -p "$MOUNT_POINT"
mount "$DEVICE" "$MOUNT_POINT"

# Persist the mount in fstab
if ! grep -qs "$MOUNT_POINT" /etc/fstab; then
  echo "$DEVICE $MOUNT_POINT xfs defaults,nofail 0 2" >> /etc/fstab
fi

# Set proper ownership for MongoDB
chown -R mongod:mongod "$MOUNT_POINT"

# Update mongod configuration
sed -i 's/^  bindIp:.*$/  bindIp: 0.0.0.0/' /etc/mongod.conf
sed -i 's|dbPath: /var/lib/mongo|dbPath: /data/db|' /etc/mongod.conf

# Enable and start mongod
systemctl enable mongod
systemctl start mongod

# Wait a bit for Mongo to come up
sleep 10

# ===== Secrets handling (no leaks in logs) =====
set +x
AWS_REGION="eu-central-1"
SSM_USER_PARAM="/nat20/mongo/USER"
SSM_PASS_PARAM="/nat20/mongo/PASSWORD"
S3_MONGO_USER="$(aws ssm get-parameter --name "$SSM_USER_PARAM" --with-decryption --query 'Parameter.Value' --output text --region "$AWS_REGION")"
S3_MONGO_PASS="$(aws ssm get-parameter --name "$SSM_PASS_PARAM" --with-decryption --query 'Parameter.Value' --output text --region "$AWS_REGION")"
if [ -z "$S3_MONGO_USER" ] || [ -z "$S3_MONGO_PASS" ]; then
  echo "ERROR: Missing SSM parameters $SSM_USER_PARAM or $SSM_PASS_PARAM" >&2
  exit 1
fi

cat >/tmp/create_app_user.js <<'JS'
const user = (process.env.S3_MONGO_USER || "").trim();
const pass = (process.env.S3_MONGO_PASS || "").trim();
if (!user || !pass) { throw new Error("Missing S3_MONGO_USER or S3_MONGO_PASS"); }
const admin = db.getSiblingDB("admin");
const existing = admin.system.users.findOne({ user, db: "admin" });
if (existing) {
  print("User '" + user + "' already exists in admin; skipping create.");
} else {
  admin.createUser({ user, pwd: pass, roles: [ { role: "root", db: "admin" } ] });
  print("Created admin user '" + user + "'.");
}
JS
S3_MONGO_USER="$S3_MONGO_USER" S3_MONGO_PASS="$S3_MONGO_PASS" mongosh --file /tmp/create_app_user.js
set -x

# Enable authorization (idempotent)
if grep -qE '^\s*#\s*security:' /etc/mongod.conf; then
  sed -i 's/^\s*#\s*security:.*/security:\n  authorization: enabled/' /etc/mongod.conf
elif ! grep -qE '^\s*security:' /etc/mongod.conf; then
  printf '\nsecurity:\n  authorization: enabled\n' >> /etc/mongod.conf
else
  if ! grep -qE '^\s*authorization:\s*enabled' /etc/mongod.conf; then
    sed -i '/^\s*security:/a\  authorization: enabled' /etc/mongod.conf
  fi
fi

# Restart to apply auth
systemctl restart mongod
