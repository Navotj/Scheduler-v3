##############################
# CloudFront Backend Edge Key
# - Generated by Terraform (random_password)
# - Stored in AWS Secrets Manager
# - Exposed via local for internal use
##############################

terraform {
  required_providers {
    aws    = { source = "hashicorp/aws", version = ">= 5.0" }
    random = { source = "hashicorp/random", version = ">= 3.5" }
  }
}

# Strong random key (64 bytes base64 => ~86 chars). Adjust length if your consumer needs hex.
resource "random_password" "cloudfront_backend_edge_key" {
  length  = 64
  special = true
}

# Secret container (stable name so other systems can read it if needed)
resource "aws_secretsmanager_secret" "cloudfront_backend_edge_key" {
  name                    = "/nat20/cloudfront/backend_edge_key"
  recovery_window_in_days = 0
  description             = "Shared secret for CloudFront -> backend authentication"
  tags = {
    app   = "nat20"
    scope = "edge-key"
  }
}

# Current version with the generated value
resource "aws_secretsmanager_secret_version" "cloudfront_backend_edge_key" {
  secret_id     = aws_secretsmanager_secret.cloudfront_backend_edge_key.id
  secret_string = random_password.cloudfront_backend_edge_key.result
}

# Local handle for in-Terraform consumers (avoid re-reading via data source)
locals {
  cloudfront_backend_edge_key_value = random_password.cloudfront_backend_edge_key.result
}

# Optional outputs:
# - value is sensitive (redacted in CLI output); use only if another module consumes it via output
# - arn/name help external systems discover/read the secret without exposing the value
output "cloudfront_backend_edge_key_value" {
  value     = local.cloudfront_backend_edge_key_value
  sensitive = true
}

output "cloudfront_backend_edge_key_secret_arn" {
  value = aws_secretsmanager_secret.cloudfront_backend_edge_key.arn
}

output "cloudfront_backend_edge_key_secret_name" {
  value = aws_secretsmanager_secret.cloudfront_backend_edge_key.name
}
