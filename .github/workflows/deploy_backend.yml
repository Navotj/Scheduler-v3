name: Deploy Backend to EKS

on:
  push:
    branches: ["main"]
    paths:
      - "backend/**"
      - ".github/workflows/deploy_backend.yml"
      - "infrastructure/docker/backend/Dockerfile"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: eu-central-1
      CLUSTER_NAME: nat20-eks

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ECR URIs and cert/SG from SSM
        id: ssm
        run: |
          set -euo pipefail
          ECR_BACKEND_URI=$(aws ssm get-parameter --name /nat20/ecr/BACKEND_URI --query Parameter.Value --output text)
          API_CERT_ARN=$(aws ssm get-parameter --name /nat20/network/API_CERT_ARN --query Parameter.Value --output text)
          ALB_BACKEND_SG_ID=$(aws ssm get-parameter --name /nat20/network/ALB_BACKEND_SG_ID --query Parameter.Value --output text)
          echo "ECR_BACKEND_URI=$ECR_BACKEND_URI" >> $GITHUB_ENV
          echo "API_CERT_ARN=$API_CERT_ARN" >> $GITHUB_ENV
          echo "ALB_BACKEND_SG_ID=$ALB_BACKEND_SG_ID" >> $GITHUB_ENV
          echo "API_HOST=api.nat20scheduling.com" >> $GITHUB_ENV

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image
        run: |
          set -euo pipefail
          docker build -t "$ECR_BACKEND_URI:${GITHUB_SHA}" -f infrastructure/docker/backend/Dockerfile .
          docker push "$ECR_BACKEND_URI:${GITHUB_SHA}"
          echo "BACKEND_IMAGE=$ECR_BACKEND_URI:${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Update image in k8s manifest
        run: |
          set -euo pipefail
          sed -i "s#<ECR_URI_REPLACED_BY_CI>/backend:\${GITHUB_SHA}#${ECR_BACKEND_URI}:${GITHUB_SHA}#g" infrastructure/k8s/backend/deployment.yaml

      - name: Update ingress template vars (envsubst)
        run: |
          set -euo pipefail
          API_CERT_ARN="${API_CERT_ARN}" ALB_BACKEND_SG_ID="${ALB_BACKEND_SG_ID}" API_HOST="${API_HOST}" \
          envsubst < infrastructure/k8s/ingress/backend-ingress.yaml > /tmp/backend-ingress.rendered.yaml

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name "${CLUSTER_NAME}" --region "${AWS_REGION}"

      - name: Apply namespace, secrets, backend, ingress
        run: |
          set -euo pipefail
          kubectl apply -f infrastructure/k8s/namespaces/nat20.yaml
          kubectl apply -f infrastructure/k8s/secret-stores/clustersecretstore.yaml
          kubectl apply -f infrastructure/k8s/externalsecrets/backend-secrets.yaml
          kubectl rollout status deployment/external-secrets -n externalsecrets --timeout=120s || true
          kubectl apply -f infrastructure/k8s/backend/deployment.yaml
          kubectl apply -f /tmp/backend-ingress.rendered.yaml
          kubectl rollout status deployment/backend -n nat20 --timeout=180s || (kubectl -n nat20 describe deploy backend; kubectl -n nat20 logs deploy/backend --all-containers --tail=200; exit 1)

      - name: Discover Backend ALB DNS and publish to Route53 variable
        id: alb
        run: |
          set -euo pipefail
          # Find the ALB created for backend ingress
          ARN=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?starts_with(LoadBalancerName, 'k8s-nat20-backend') || contains(DNSName, 'elb.amazonaws.com')].LoadBalancerArn" --output text | head -n1)
          [ -z "$ARN" ] && echo "Could not find backend ALB ARN" && exit 1
          DNS=$(aws elbv2 describe-load-balancers --load-balancer-arns "$ARN" --query "LoadBalancers[0].DNSName" --output text)
          echo "BACKEND_ALB_DNS=$DNS" >> $GITHUB_ENV
          echo "backend_alb_dns=$DNS" >> $GITHUB_OUTPUT

      - name: Update Route53 record via Terraform var (optional)
        run: |
          echo "Backend ALB DNS: ${BACKEND_ALB_DNS}"
          # Optionally trigger Terraform with -var backend_alb_dns to create/refresh the api A-record
