name: Deploy Backend to EC2

on:
  push:
    branches: [ "main" ]
    paths:
      - "backend/**"
      - ".github/workflows/deploy_backend.yml"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Get account ID and artifact bucket name
      id: acct
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
        ARTIFACT_BUCKET="nat20scheduling-com-deploy-artifacts-$ACCOUNT_ID"
        echo "ARTIFACT_BUCKET=$ARTIFACT_BUCKET" >> $GITHUB_ENV

    - name: Ensure artifact bucket exists (private, encrypted)
      run: |
        set -euo pipefail
        if ! aws s3api head-bucket --bucket "$ARTIFACT_BUCKET" 2>/dev/null; then
          aws s3api create-bucket \
            --bucket "$ARTIFACT_BUCKET" \
            --region eu-central-1 \
            --create-bucket-configuration LocationConstraint=eu-central-1
          aws s3api put-bucket-encryption --bucket "$ARTIFACT_BUCKET" --server-side-encryption-configuration \
            '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
          aws s3api put-public-access-block --bucket "$ARTIFACT_BUCKET" --public-access-block-configuration '{
            "BlockPublicAcls": true,
            "IgnorePublicAcls": true,
            "BlockPublicPolicy": true,
            "RestrictPublicBuckets": true
          }'
          # 1-day lifecycle for quick cleanup
          aws s3api put-bucket-lifecycle-configuration --bucket "$ARTIFACT_BUCKET" --lifecycle-configuration '{
            "Rules": [
              {
                "ID": "ExpireArtifactsAfter1Day",
                "Status": "Enabled",
                "Prefix": "backend/",
                "Expiration": {"Days": 1},
                "NoncurrentVersionExpiration": {"NoncurrentDays": 1},
                "AbortIncompleteMultipartUpload": {"DaysAfterInitiation": 1}
              }
            ]
          }'
        fi

    - name: Get Backend Instance ID from tag
      id: backend_instance
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=terraform-backend" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].InstanceId" \
          --output text)
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

    - name: Zip backend files (code only, no secrets)
      run: |
        cd backend
        zip -r ../backend.zip .
        cd ..

    - name: Upload artifact to private S3 (encrypted)
      run: |
        set -euo pipefail
        KEY="backend/${GITHUB_SHA}.zip"
        echo "ARTIFACT_KEY=$KEY" >> $GITHUB_ENV
        aws s3 cp backend.zip "s3://$ARTIFACT_BUCKET/$KEY" --sse AES256

    - name: Deploy on instance via SSM (download from S3, render .env from SSM)
      env:
        INSTANCE_ID: ${{ env.INSTANCE_ID }}
        ARTIFACT_BUCKET: ${{ env.ARTIFACT_BUCKET }}
        ARTIFACT_KEY: ${{ env.ARTIFACT_KEY }}
        SSM_JWT_SECRET_PARAM: /nat20/backend/JWT_SECRET
        SSM_MONGO_USER_PARAM: /nat20/mongo/USER
        SSM_MONGO_PASS_PARAM: /nat20/mongo/PASSWORD
        MONGO_HOST: mongo.nat20scheduling.com
        MONGO_PORT: "27017"
      run: |
        aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --instance-ids "$INSTANCE_ID" \
          --region eu-central-1 \
          --comment "Deploy backend app from private S3 artifact; secrets from SSM" \
          --parameters commands="[ \
            \"set -e\", \
            \"sudo mkdir -p /opt/app /tmp/installation\", \
            \"sudo chown -R $(whoami):$(whoami) /tmp/installation\", \
            \"aws s3 cp s3://${ARTIFACT_BUCKET}/${ARTIFACT_KEY} /tmp/installation/backend.zip\", \
            \"unzip -o /tmp/installation/backend.zip -d /tmp/installation/\", \
            \"sudo bash -lc 'rm -rf /opt/app/* /opt/app/.* 2>/dev/null || true'\", \
            \"sudo mv /tmp/installation/app/* /opt/app || sudo mv /tmp/installation/* /opt/app || true\", \
            \"# Render .env from SSM (avoid shipping secrets in artifact)\", \
            \"JWT_SECRET=$(aws ssm get-parameter --name ${SSM_JWT_SECRET_PARAM} --with-decryption --query Parameter.Value --output text)\", \
            \"MONGO_USER=$(aws ssm get-parameter --name ${SSM_MONGO_USER_PARAM} --with-decryption --query Parameter.Value --output text)\", \
            \"MONGO_PASS=$(aws ssm get-parameter --name ${SSM_MONGO_PASS_PARAM} --with-decryption --query Parameter.Value --output text)\", \
            \"echo \\\"JWT_SECRET=$JWT_SECRET\\\" | sudo tee /opt/app/.env >/dev/null\", \
            \"echo \\\"MONGO_URI=mongodb://$MONGO_USER:$MONGO_PASS@${MONGO_HOST}:${MONGO_PORT}?authSource=admin\\\" | sudo tee -a /opt/app/.env >/dev/null\", \
            \"cd /opt/app && npm install --omit=dev || npm install\", \
            \"if [ -f /opt/app/scheduler.service ]; then sudo mv /opt/app/scheduler.service /etc/systemd/system/scheduler.service; fi\", \
            \"sudo systemctl daemon-reexec\", \
            \"sudo systemctl daemon-reload\", \
            \"sudo systemctl enable scheduler || true\", \
            \"sudo systemctl restart scheduler\", \
            \"# Clean up artifact from instance\", \
            \"rm -f /tmp/installation/backend.zip\", \
            \"# Clean up artifact from S3 (best-effort)\", \
            \"aws s3 rm s3://${ARTIFACT_BUCKET}/${ARTIFACT_KEY} || true\" \
          ]" \
          --output text

    - name: Clean up local artifact
      if: always()
      run: rm -f backend.zip
