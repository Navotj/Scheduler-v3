name: Deploy Backend to EKS

on:
  push:
    branches: ["main"]
    paths:
      - "backend/**"
      - ".github/workflows/deploy_backend.yml"
      - "infrastructure/docker/backend/Dockerfile"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: eu-central-1
      CLUSTER_NAME: nat20-eks

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Resolve ECR URI and SSM parameters (robust)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail

          # --- ECR backend URI from SSM; fallback to derive and ensure repo exists ---
          ECR_BACKEND_URI="$(aws ssm get-parameter --name /nat20/ecr/BACKEND_URI --query Parameter.Value --output text 2>/dev/null || true)"
          if [ -z "${ECR_BACKEND_URI:-}" ] || [ "${ECR_BACKEND_URI}" = "None" ]; then
            ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
            REPO_NAME="backend"
            ECR_BACKEND_URI="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${REPO_NAME}"
            aws ecr describe-repositories --repository-names "${REPO_NAME}" >/dev/null 2>&1 || \
              aws ecr create-repository --repository-name "${REPO_NAME}" >/dev/null
          fi
          echo "ECR_BACKEND_URI=${ECR_BACKEND_URI}" >> "$GITHUB_ENV"

          # --- Required network params from SSM ---
          API_CERT_ARN="$(aws ssm get-parameter --name /nat20/network/API_CERT_ARN --query Parameter.Value --output text 2>/dev/null || true)"
          ALB_BACKEND_SG_ID="$(aws ssm get-parameter --name /nat20/network/ALB_BACKEND_SG_ID --query Parameter.Value --output text 2>/dev/null || true)"

          if [ -z "${API_CERT_ARN:-}" ] || [ "${API_CERT_ARN}" = "None" ]; then
            echo "Missing SSM parameter: /nat20/network/API_CERT_ARN" >&2
            exit 1
          fi
          if [ -z "${ALB_BACKEND_SG_ID:-}" ] || [ "${ALB_BACKEND_SG_ID}" = "None" ]; then
            echo "Missing SSM parameter: /nat20/network/ALB_BACKEND_SG_ID" >&2
            exit 1
          fi

          echo "API_CERT_ARN=${API_CERT_ARN}" >> "$GITHUB_ENV"
          echo "ALB_BACKEND_SG_ID=${ALB_BACKEND_SG_ID}" >> "$GITHUB_ENV"
          echo "API_HOST=api.nat20scheduling.com" >> "$GITHUB_ENV"

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image
        shell: bash
        run: |
          set -euo pipefail
          docker build -t "${ECR_BACKEND_URI}:${GITHUB_SHA}" -f infrastructure/docker/backend/Dockerfile .
          docker push "${ECR_BACKEND_URI}:${GITHUB_SHA}"
          echo "BACKEND_IMAGE=${ECR_BACKEND_URI}:${GITHUB_SHA}" >> "$GITHUB_ENV"

      - name: Update image in k8s manifest
        shell: bash
        run: |
          set -euo pipefail
          sed -i "s#<ECR_URI_REPLACED_BY_CI>/backend:\${GITHUB_SHA}#${ECR_BACKEND_URI}:${GITHUB_SHA}#g" infrastructure/k8s/backend/deployment.yaml

      - name: Configure kubectl
        shell: bash
        run: |
          set -euo pipefail
          aws eks update-kubeconfig --name "${CLUSTER_NAME}" --region "${AWS_REGION}"

      - name: Ensure namespaces exist
        shell: bash
        run: |
          set -euo pipefail
          kubectl get ns nat20 >/dev/null 2>&1 || kubectl create ns nat20
          kubectl get ns externalsecrets >/dev/null 2>&1 || kubectl create ns externalsecrets

      - name: Ensure External Secrets CRDs (server-side, pinned)
        shell: bash
        run: |
          set -euo pipefail
          # Install/upgrade CRDs and wait for them to be Established
          kubectl apply --server-side -f https://raw.githubusercontent.com/external-secrets/external-secrets/v0.19.2/deploy/crds/bundle.yaml
          kubectl wait --for=condition=Established crd clustersecretstores.external-secrets.io --timeout=180s
          kubectl wait --for=condition=Established crd secretstores.external-secrets.io --timeout=180s
          kubectl wait --for=condition=Established crd externalsecrets.external-secrets.io --timeout=180s

      - name: Resolve ALB subnets for this cluster
        shell: bash
        run: |
          set -euo pipefail
          SUBNETS_CSV="$(aws eks describe-cluster --name "${CLUSTER_NAME}" --region "${AWS_REGION}" \
            --query 'cluster.resourcesVpcConfig.subnetIds' --output text | sed 's/\t/,/g')"
          if [ -z "${SUBNETS_CSV:-}" ]; then
            echo "Could not resolve cluster subnets" >&2
            exit 1
          fi
          echo "ALB_PUBLIC_SUBNET_IDS=${SUBNETS_CSV}" >> "$GITHUB_ENV"

      - name: Render backend ingress (envsubst)
        shell: bash
        run: |
          set -euo pipefail
          : "${ALB_PUBLIC_SUBNET_IDS:?ALB_PUBLIC_SUBNET_IDS is not set}"
          : "${API_CERT_ARN:?API_CERT_ARN is not set}"
          : "${ALB_BACKEND_SG_ID:?ALB_BACKEND_SG_ID is not set}"
          : "${API_HOST:?API_HOST is not set}"

          API_CERT_ARN="${API_CERT_ARN}" \
          ALB_BACKEND_SG_ID="${ALB_BACKEND_SG_ID}" \
          API_HOST="${API_HOST}" \
          ALB_PUBLIC_SUBNET_IDS="${ALB_PUBLIC_SUBNET_IDS}" \
          envsubst < infrastructure/k8s/ingress/backend-ingress.yaml > /tmp/backend-ingress.rendered.yaml

      - name: Apply secret store, backend, ingress
        shell: bash
        run: |
          set -euo pipefail
          kubectl apply -f infrastructure/k8s/secret-stores/clustersecretstore.yaml
          kubectl apply -n nat20 -f infrastructure/k8s/externalsecrets/backend-secrets.yaml

          kubectl apply -n nat20 -f infrastructure/k8s/backend/deployment.yaml
          kubectl apply -n nat20 -f /tmp/backend-ingress.rendered.yaml
          kubectl rollout status deployment/backend -n nat20 --timeout=180s || (kubectl -n nat20 describe deploy backend; kubectl -n nat20 logs deploy/backend --all-containers --tail=200; exit 1)

          kubectl -n nat20 patch ingress backend --type merge -p '{"spec":{"ingressClassName":"alb"}}' || true
          kubectl -n nat20 annotate ingress backend "alb.ingress.kubernetes.io/subnets=${ALB_PUBLIC_SUBNET_IDS}" --overwrite || true

      - name: Wait for Backend Ingress hostname (ALB provisioning)
        id: alb
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n kube-system get deploy aws-load-balancer-controller >/dev/null 2>&1 || true

          HOSTNAME=""
          for i in $(seq 1 90); do
            HOSTNAME="$(kubectl -n nat20 get ingress backend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)"
            if [ -n "${HOSTNAME}" ] && [ "${HOSTNAME}" != "<no value>" ]; then
              break
            fi
            sleep 10
          done

          if [ -z "${HOSTNAME}" ] || [ "${HOSTNAME}" = "<no value>" ]; then
            echo "Ingress not ready; collecting diagnostics..." >&2
            kubectl -n nat20 describe ingress backend || true
            kubectl -n kube-system get deploy aws-load-balancer-controller -o wide || true
            kubectl -n kube-system logs deploy/aws-load-balancer-controller --tail=300 || true
            exit 1
          fi

          echo "BACKEND_ALB_DNS=${HOSTNAME}" >> "$GITHUB_ENV"
          echo "backend_alb_dns=${HOSTNAME}" >> "$GITHUB_OUTPUT"

      - name: Output backend ALB DNS
        shell: bash
        run: |
          echo "Backend ALB DNS: ${BACKEND_ALB_DNS}"
