name: Deploy Backend to EC2

on:
  push:
    branches: [ "main" ]
    paths:
      - "backend/**"
      - ".github/workflows/deploy_backend.yml"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Get Backend Instance ID from tag
      id: backend_instance
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=terraform-backend" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].InstanceId" \
          --output text)
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

    - name: Create .env file from TF_VAR secrets
      run: |
        echo "MONGO_URI=mongodb://${{ secrets.TF_VAR_S3_MONGO_USER }}:${{ secrets.TF_VAR_S3_MONGO_PASSWORD }}@mongo.nat20scheduling.com:27017" >> backend/app/.env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> backend/app/.env


    - name: Zip backend files
      run: |
        cd backend
        zip -r ../backend.zip .
        cd ..

    - name: Upload zip to S3 temp bucket
      run: |
        aws s3 cp backend.zip s3://nat20scheduling.com/backend.zip

    - name: Deploy backend via SSM
      run: |
        aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --instance-ids ${{ env.INSTANCE_ID }} \
          --region eu-central-1 \
          --comment "Deploy backend app" \
          --parameters 'commands=[
            "mkdir -p /opt/app /tmp/installation",
            "aws s3 cp s3://nat20scheduling.com/backend.zip /tmp/installation/backend.zip",
            "sudo unzip /tmp/installation/backend.zip -d /tmp/installation/",
            "sudo rm -rf /opt/app/*",
            "sudo mv /tmp/installation/app/* /opt/app",
            "sudo mv /tmp/installation/app/.env /opt/app",
            "sudo mv /tmp/installation/scheduler.service /etc/systemd/system/scheduler.service",
            "cd /opt/app && npm install",
            "sudo systemctl daemon-reexec",
            "sudo systemctl daemon-reload",
            "sudo systemctl enable scheduler",
            "sudo systemctl restart scheduler"
          ]' \
          --output text
