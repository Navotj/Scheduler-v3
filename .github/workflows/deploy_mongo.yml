name: Deploy Mongo to EKS

on:
  push:
    branches: ["main"]
    paths:
      - ".github/workflows/deploy_mongo.yml"
      - "infrastructure/k8s/mongo/**"
      - "infrastructure/k8s/externalsecrets/mongo-secrets.yaml"
      - "infrastructure/k8s/secret-stores/clustersecretstore.yaml"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: eu-central-1
      CLUSTER_NAME: nat20-eks
      # EKS_JOB_PUBLIC_CIDRS: 0.0.0.0/0

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        timeout-minutes: 2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        timeout-minutes: 2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # --- widen API allowlist (job only) + capture original + connectivity gate ---
      - name: Capture current EKS API CIDRs + endpoint
        timeout-minutes: 2
        shell: bash
        run: |
          set -euo pipefail
          ORIG="$(aws eks describe-cluster --name "${CLUSTER_NAME}" --region "${AWS_REGION}" \
            --query 'cluster.resourcesVpcConfig.publicAccessCidrs' --output text | sed 's/\t/,/g')"
          ENDPOINT="$(aws eks describe-cluster --name "${CLUSTER_NAME}" --region "${AWS_REGION}" \
            --query 'cluster.endpoint' --output text)"
          echo "ORIGINAL_EKS_API_CIDRS=${ORIG}" >> "$GITHUB_ENV"
          echo "EKS_ENDPOINT=${ENDPOINT}" >> "$GITHUB_ENV"

      - name: Widen EKS API allowlist for this job + 3-try connectivity
        timeout-minutes: 4
        shell: bash
        run: |
          set -euo pipefail
          TARGET="${EKS_JOB_PUBLIC_CIDRS:-0.0.0.0/0}"

          CURRENT="$(aws eks describe-cluster --name "${CLUSTER_NAME}" --region "${AWS_REGION}" \
            --query 'cluster.resourcesVpcConfig.publicAccessCidrs' --output text | sed 's/\t/,/g')"

          if [ "${CURRENT}" != "${TARGET}" ]; then
            set +e
            RESP="$(aws eks update-cluster-config --name "${CLUSTER_NAME}" --region "${AWS_REGION}" \
              --resources-vpc-config publicAccessCidrs="${TARGET}" --output json 2>/tmp/eks_update.err)"
            RC=$?
            set -e
            if [ $RC -ne 0 ] && ! grep -qi "already at the desired configuration" /tmp/eks_update.err; then
              echo "EKS update failed:"; cat /tmp/eks_update.err; exit 1
            fi
          fi

          HOST="$(echo "${EKS_ENDPOINT}" | sed -E 's#https?://##g')"
          for i in 1 2 3; do
            if timeout 3 bash -lc "exec 3<>/dev/tcp/${HOST}/443" 2>/dev/null; then
              exec 3>&-
              echo "EKS endpoint reachable."
              exit 0
            fi
            sleep 2
          done
          echo "EKS endpoint NOT reachable after 3 tries."
          exit 1

      - name: Configure kubectl (3 tries)
        timeout-minutes: 3
        shell: bash
        run: |
          set -euo pipefail
          for i in 1 2 3; do
            if aws eks update-kubeconfig --name "${CLUSTER_NAME}" --region "${AWS_REGION}" --alias "${CLUSTER_NAME}"; then
              break
            fi
            sleep $((i*2))
            [ $i -eq 3 ] && exit 1
          done
          for i in 1 2 3; do
            if kubectl --request-timeout=8s version --short >/dev/null 2>&1; then
              exit 0
            fi
            sleep 2
          done
          echo "kubectl never became ready (3 tries)."; exit 1

      - name: Ensure namespaces
        timeout-minutes: 2
        shell: bash
        run: |
          set -euo pipefail
          kubectl get ns nat20 >/dev/null 2>&1 || kubectl create ns nat20
          kubectl get ns externalsecrets >/dev/null 2>&1 || kubectl create ns externalsecrets

      - name: Ensure External Secrets CRDs (pinned)
        timeout-minutes: 3
        shell: bash
        run: |
          set -euo pipefail
          kubectl apply --server-side -f https://raw.githubusercontent.com/external-secrets/external-secrets/v0.19.2/deploy/crds/bundle.yaml
          kubectl wait --for=condition=Established crd clustersecretstores.external-secrets.io --timeout=90s
          kubectl wait --for=condition=Established crd secretstores.external-secrets.io --timeout=90s
          kubectl wait --for=condition=Established crd externalsecrets.external-secrets.io --timeout=90s

      - name: Preflight required SSM params
        timeout-minutes: 1
        shell: bash
        run: |
          set -euo pipefail
          MISSING=0
          for KEY in /nat20/mongo/USER /nat20/mongo/PASSWORD; do
            if ! aws ssm get-parameter --name "$KEY" >/dev/null 2>&1; then
              echo "Missing SSM parameter: $KEY" >&2
              MISSING=1
            fi
          done
          [ $MISSING -eq 0 ] || { echo "Required SSM parameters missing; aborting." >&2; exit 1; }

      - name: Ensure gp3 StorageClass (idempotent)
        timeout-minutes: 2
        shell: bash
        run: |
          set -euo pipefail
          if ! kubectl get sc gp3 >/dev/null 2>&1; then
            cat <<'YAML' | kubectl apply -f -
            apiVersion: storage.k8s.io/v1
            kind: StorageClass
            metadata:
              name: gp3
            provisioner: ebs.csi.aws.com
            allowVolumeExpansion: true
            volumeBindingMode: WaitForFirstConsumer
            parameters:
              type: gp3
              fsType: ext4
              encrypted: "true"
            reclaimPolicy: Delete
            YAML
          fi
          kubectl get sc gp3 -o wide

      - name: Verify AWS EBS CSI addon (attempt install if missing)
        timeout-minutes: 3
        shell: bash
        run: |
          set -euo pipefail
          ADDON=$(aws eks list-addons --cluster-name "${CLUSTER_NAME}" --region "${AWS_REGION}" \
            --query 'addons[]' --output text | tr '\t' '\n' | grep -E '^aws-ebs-csi-driver$' || true)
          if [ -z "${ADDON}" ]; then
            echo "aws-ebs-csi-driver addon not listed; attempting install (may already be present via Helm/other)â€¦"
            set +e
            aws eks create-addon --cluster-name "${CLUSTER_NAME}" --region "${AWS_REGION}" \
              --addon-name aws-ebs-csi-driver >/dev/null 2>&1
            RC=$?
            set -e
            if [ $RC -ne 0 ]; then
              echo "Could not create addon (possibly already installed or insufficient IAM). Continuing."
            fi
          fi
          # Quick check for the controller DaemonSet/Deployment presence (any namespace)
          if ! kubectl get pods -A -l app.kubernetes.io/name=aws-ebs-csi-driver >/dev/null 2>&1; then
            echo "WARNING: EBS CSI driver pods not found; PVC provisioning may stall." >&2
          fi

      - name: Apply ClusterSecretStore + Mongo ExternalSecret
        timeout-minutes: 3
        shell: bash
        run: |
          set -euo pipefail
          kubectl apply -f infrastructure/k8s/secret-stores/clustersecretstore.yaml
          kubectl apply -n nat20 -f infrastructure/k8s/externalsecrets/mongo-secrets.yaml
          # wait (short) for secret to appear
          for i in 1 2 3 4 5 6; do
            if kubectl -n nat20 get secret mongo-root >/dev/null 2>&1; then
              exit 0
            fi
            sleep 5
          done
          echo "mongo-root Secret not materialized (ExternalSecrets)"; exit 1

      - name: Deploy MongoDB (Services first, then StatefulSet with immutable check)
        timeout-minutes: 10
        shell: bash
        run: |
          set -euo pipefail
          MANIFEST="infrastructure/k8s/mongo/statefulset.yaml"

          # Ensure 'mongo' Service is ClusterIP (not headless)
          if kubectl -n nat20 get svc mongo >/dev/null 2>&1; then
            CIP="$(kubectl -n nat20 get svc mongo -o jsonpath='{.spec.clusterIP}' || true)"
            if [ "${CIP}" = "None" ]; then
              kubectl -n nat20 delete svc mongo
            fi
          fi

          RAW_JSON="$(kubectl apply -n nat20 --dry-run=client -f "${MANIFEST}" -o json)"
          ITEMS_JSON="$(echo "${RAW_JSON}" | jq -c 'if .kind=="List" then .items else [.] end')"

          echo "${ITEMS_JSON}" | jq -c '.[] | select(.kind=="Service")' | while read -r SVC; do
            echo "${SVC}" | kubectl -n nat20 apply -f -
          done

          DESIRED_STS="$(echo "${ITEMS_JSON}" | jq '.[] | select(.kind=="StatefulSet")')"
          [ -n "${DESIRED_STS}" ] && [ "${DESIRED_STS}" != "null" ] || { echo "No StatefulSet in ${MANIFEST}" >&2; exit 1; }

          DES_SVC_NAME="$(echo "${DESIRED_STS}" | jq -r '.spec.serviceName')"
          DES_SELECTOR="$(echo "${DESIRED_STS}" | jq -c '.spec.selector')"
          DES_VCT="$(echo "${DESIRED_STS}" | jq -c '.spec.volumeClaimTemplates')"

          if kubectl -n nat20 get sts mongo >/dev/null 2>&1; then
            CUR_JSON="$(kubectl -n nat20 get sts mongo -o json)"
            CUR_SVC_NAME="$(echo "${CUR_JSON}" | jq -r '.spec.serviceName')"
            CUR_SELECTOR="$(echo "${CUR_JSON}" | jq -c '.spec.selector')"
            CUR_VCT="$(echo "${CUR_JSON}" | jq -c '.spec.volumeClaimTemplates')"

            NEED_RECREATE=0
            [ "${CUR_SVC_NAME}" != "${DES_SVC_NAME}" ] && NEED_RECREATE=1
            [ "${CUR_SELECTOR}" != "${DES_SELECTOR}" ] && NEED_RECREATE=1
            [ "${CUR_VCT}" != "${DES_VCT}" ] && NEED_RECREATE=1

            if [ $NEED_RECREATE -eq 1 ]; then
              kubectl -n nat20 scale sts mongo --replicas=0 || true
              for i in 1 2 3; do
                CNT="$(kubectl -n nat20 get pods -l app=mongo --no-headers 2>/dev/null | wc -l | tr -d ' ')"
                [ "${CNT}" = "0" ] && break
                sleep 5
              done
              kubectl -n nat20 delete sts mongo --wait=true
            fi
          fi

          echo "${DESIRED_STS}" | kubectl -n nat20 apply -f -

          # Fail fast if PVC doesn't bind quickly
          for i in 1 2 3; do
            PHASE="$(kubectl -n nat20 get pvc mongo-data-mongo-0 -o jsonpath='{.status.phase}' 2>/dev/null || true)"
            [ "${PHASE}" = "Bound" ] && break
            [ $i -eq 3 ] && { echo "PVC still not Bound after 3 checks:"; kubectl -n nat20 describe pvc mongo-data-mongo-0 || true; exit 1; }
            sleep 10
          done

          kubectl -n nat20 rollout status statefulset/mongo --timeout=8m

      - name: Output Mongo service
        timeout-minutes: 1
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n nat20 get svc mongo -o wide || true

      - name: Restore EKS API CIDRs to original (always, idempotent)
        if: always()
        timeout-minutes: 3
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${ORIGINAL_EKS_API_CIDRS:-}" ]; then
            CUR="$(aws eks describe-cluster --name "${CLUSTER_NAME}" --region "${AWS_REGION}" \
              --query 'cluster.resourcesVpcConfig.publicAccessCidrs' --output text | sed 's/\t/,/g')"
            if [ "${CUR}" != "${ORIGINAL_EKS_API_CIDRS}" ]; then
              set +e
              aws eks update-cluster-config --name "${CLUSTER_NAME}" --region "${AWS_REGION}" \
                --resources-vpc-config publicAccessCidrs="${ORIGINAL_EKS_API_CIDRS}" 2>/tmp/eks_restore.err
              RC=$?
              set -e
              if [ $RC -ne 0 ] && ! grep -qi "already at the desired configuration" /tmp/eks_restore.err; then
                echo "Restore failed:"; cat /tmp/eks_restore.err; exit 1
              fi
            fi
          else
            echo "No ORIGINAL_EKS_API_CIDRS captured; leaving current setting."
          fi
