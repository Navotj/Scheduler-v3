name: Deploy Frontend to EKS

on:
  push:
    branches: ["main"]
    paths:
      - "frontend/**"
      - "infrastructure/docker/frontend/Dockerfile"
      - "infrastructure/k8s/frontend/deployment.yaml"
      - "infrastructure/k8s/ingress/frontend-ingress.yaml"
      - ".github/workflows/deploy_frontend.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-central-1
  CLUSTER_NAME: nat20-eks
  PROJECT_NAME: nat20
  NAMESPACE: nat20
  ECR_REPO: nat20/frontend

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image variables
        id: vars
        run: |
          set -euo pipefail
          echo "ECR_REGISTRY=${{ steps.ecr-login.outputs.registry }}" >> "$GITHUB_ENV"
          echo "IMAGE_URI=${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO }}:sha-${GITHUB_SHA}" >> "$GITHUB_ENV"

      - name: Build image
        run: |
          set -euo pipefail
          docker build \
            -f infrastructure/docker/frontend/Dockerfile \
            -t "${IMAGE_URI}" \
            --label "org.opencontainers.image.revision=${GITHUB_SHA}" \
            --label "org.opencontainers.image.source=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" \
            .
      - name: Push image
        run: |
          set -euo pipefail
          docker push "${IMAGE_URI}"

      - name: Fetch required parameters (SSM)
        id: ssm
        run: |
          set -euo pipefail
          ORIGIN_CERT_ARN="$(aws ssm get-parameter --name /nat20/network/ORIGIN_CERT_ARN --query 'Parameter.Value' --output text)"
          ALB_FRONTEND_SG_ID="$(aws ssm get-parameter --name /nat20/network/ALB_FRONTEND_SG_ID --query 'Parameter.Value' --output text)"
          echo "ORIGIN_CERT_ARN=${ORIGIN_CERT_ARN}" >> "$GITHUB_ENV"
          echo "ALB_FRONTEND_SG_ID=${ALB_FRONTEND_SG_ID}" >> "$GITHUB_ENV"

      - name: Configure kubectl
        run: |
          set -euo pipefail
          aws eks update-kubeconfig --name "${CLUSTER_NAME}" --region "${AWS_REGION}"
          kubectl version --short || true
          kubectl get nodes -o wide || true

      - name: Ensure namespace exists
        run: |
          set -euo pipefail
          kubectl apply -f infrastructure/k8s/namespaces/nat20.yaml

      - name: Apply frontend Deployment/Service
        run: |
          set -euo pipefail
          kubectl apply -f infrastructure/k8s/frontend/deployment.yaml

      - name: Apply frontend Ingress (envsubst)
        run: |
          set -euo pipefail
          envsubst < infrastructure/k8s/ingress/frontend-ingress.yaml | kubectl apply -f -

      - name: Set image on Deployment
        run: |
          set -euo pipefail
          kubectl -n "${NAMESPACE}" set image deployment/frontend frontend="${IMAGE_URI}"

      - name: Rollout status
        run: |
          set -euo pipefail
          kubectl -n "${NAMESPACE}" rollout status deployment/frontend --timeout=300s

      - name: Debug on failure
        if: failure()
        run: |
          set -euo pipefail
          kubectl -n "${NAMESPACE}" get all -o wide
          kubectl -n "${NAMESPACE}" describe deployment frontend
          kubectl -n "${NAMESPACE}" get ingress frontend -o yaml || true
          kubectl -n "${NAMESPACE}" get events --sort-by=.lastTimestamp | tail -n 200 || true
