name: Deploy Frontend to EKS

on:
  push:
    branches: ["main"]
    paths:
      - "frontend/**"
      - "infrastructure/docker/frontend/Dockerfile"
      - "infrastructure/k8s/frontend/deployment.yaml"
      - "infrastructure/k8s/ingress/frontend-ingress.yaml"
      - ".github/workflows/deploy_frontend.yml"
  workflow_dispatch:

concurrency:
  group: deploy-frontend-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-central-1
  CLUSTER_NAME: nat20-eks
  PROJECT_NAME: nat20
  NAMESPACE: nat20
  ECR_REPO: nat20/frontend
  KUBECTL_TIMEOUT: 45s
  AWS_RETRY_MODE: standard
  AWS_MAX_ATTEMPTS: "6"

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 35

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Ensure deps (jq, envsubst, curl)
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq gettext-base curl

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image variables
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          echo "ECR_REGISTRY=${{ steps.ecr-login.outputs.registry }}" >> "$GITHUB_ENV"
          echo "IMAGE_URI=${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO }}:sha-${GITHUB_SHA}" >> "$GITHUB_ENV"

      - name: Build image
        shell: bash
        run: |
          set -euo pipefail
          docker build \
            -f infrastructure/docker/frontend/Dockerfile \
            -t "${IMAGE_URI}" \
            --label "org.opencontainers.image.revision=${GITHUB_SHA}" \
            --label "org.opencontainers.image.source=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" \
            .

      - name: Push image
        shell: bash
        run: |
          set -euo pipefail
          docker push "${IMAGE_URI}"

      - name: Fetch required parameters (SSM)
        id: ssm
        shell: bash
        run: |
          set -euo pipefail
          ORIGIN_CERT_ARN="$(aws ssm get-parameter --name /nat20/network/ORIGIN_CERT_ARN --query 'Parameter.Value' --output text)"
          ALB_FRONTEND_SG_ID="$(aws ssm get-parameter --name /nat20/network/ALB_FRONTEND_SG_ID --query 'Parameter.Value' --output text)"
          echo "ORIGIN_CERT_ARN=${ORIGIN_CERT_ARN}" >> "$GITHUB_ENV"
          echo "ALB_FRONTEND_SG_ID=${ALB_FRONTEND_SG_ID}" >> "$GITHUB_ENV"

      - name: Configure kubeconfig
        id: kubeconfig
        shell: bash
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
        run: |
          set -euo pipefail
          aws eks update-kubeconfig --name "${CLUSTER_NAME}" --region "${AWS_REGION}"
          kubectl version --client

      # ===== EKS API Reachability Debug & Fix =====
      - name: Preflight - API reachability (brief)
        id: preflight
        shell: bash
        continue-on-error: true
        env:
          KUBECTL_TIMEOUT: ${{ env.KUBECTL_TIMEOUT }}
        run: |
          set -euo pipefail
          ok=false
          for i in {1..3}; do
            if kubectl --request-timeout="${KUBECTL_TIMEOUT}" get --raw=/version >/dev/null 2>&1; then
              ok=true; break
            fi
            echo "Attempt $i/3: API not reachable; retrying..."
            sleep 5
          done
          echo "ok=${ok}" >> "$GITHUB_OUTPUT"
          test "${ok}" = true

      - name: Open EKS API to this runner CIDR (if missing/closed)
        if: steps.preflight.outputs.ok != 'true'
        id: open_eks
        shell: bash
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
        run: |
          set -euo pipefail
          RUNNER_IP="$(curl -s https://checkip.amazonaws.com | tr -d '\n\r')"
          RUNNER_CIDR="${RUNNER_IP}/32"
          DESC="$(aws eks describe-cluster --name "${CLUSTER_NAME}" --region "${AWS_REGION}")"
          CUR_JSON="$(jq -c '.cluster.resourcesVpcConfig.publicAccessCidrs // []' <<< "${DESC}")"
          UPDATED_JSON="$(jq -cn --arg ip "${RUNNER_CIDR}" --argjson cur "${CUR_JSON:-[]}" '((($cur // []) | map(tostring)) + [$ip]) | unique')"
          UPDATED_CSV="$(jq -r 'join(",")' <<< "${UPDATED_JSON}")"

          echo "Applying EKS update: endpointPublicAccess=true, publicAccessCidrs=${UPDATED_CSV}"
          UPDATE_JSON="$(aws eks update-cluster-config \
            --name "${CLUSTER_NAME}" \
            --region "${AWS_REGION}" \
            --resources-vpc-config "endpointPublicAccess=true,publicAccessCidrs=${UPDATED_CSV}" \
            --output json)"
          UPDATE_ID="$(jq -r '.update.id' <<< "${UPDATE_JSON}")"

          for i in {1..36}; do
            s="$(aws eks describe-update --name "${CLUSTER_NAME}" --update-id "${UPDATE_ID}" --region "${AWS_REGION}" --query 'update.status' --output text || echo "")"
            [[ "${s}" == "Successful" ]] && break
            [[ "${s}" == "Failed" ]] && { echo "EKS update failed"; exit 1; }
            sleep 5
          done

          ENDPOINT="$(aws eks describe-cluster --name "${CLUSTER_NAME}" --region "${AWS_REGION}" --query 'cluster.endpoint' --output text)"
          HOST="${ENDPOINT#https://}"
          for i in {1..12}; do
            code="$(curl -sk -o /dev/null -w "%{http_code}" --connect-timeout 5 --max-time 10 "https://${HOST}/version" || true)"
            [[ "${code}" =~ ^(200|401|403|404|405)$ ]] && break
            sleep 5
          done

      # ===== K8s apply =====
      - name: Ensure namespace exists
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..3}; do
            if kubectl apply -f infrastructure/k8s/namespaces/nat20.yaml --request-timeout="${KUBECTL_TIMEOUT}"; then break; fi
            sleep 5
          done

      - name: Apply frontend (image templated)
        shell: bash
        run: |
          set -euo pipefail
          export IMAGE_URI
          TMP="$(mktemp)"
          envsubst < infrastructure/k8s/frontend/deployment.yaml > "${TMP}"
          for i in {1..3}; do
            if kubectl apply -f "${TMP}" --request-timeout="${KUBECTL_TIMEOUT}"; then break; fi
            sleep 5
          done

      - name: Apply frontend Ingress (cert/sg templated)
        shell: bash
        run: |
          set -euo pipefail
          export ORIGIN_CERT_ARN ALB_FRONTEND_SG_ID
          TMP="$(mktemp)"
          envsubst < infrastructure/k8s/ingress/frontend-ingress.yaml > "${TMP}"
          for i in {1..3}; do
            if kubectl apply -f "${TMP}" --request-timeout="${KUBECTL_TIMEOUT}"; then break; fi
            sleep 5
          done

      - name: Rollout status
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n "${NAMESPACE}" rollout status deployment/frontend --timeout=300s

      - name: On failure - collect diagnostics
        if: failure()
        shell: bash
        run: |
          set -euo pipefail
          echo "=== k8s objects ==="
          kubectl -n "${NAMESPACE}" get all -o wide || true
          echo "=== deployment describe ==="
          kubectl -n "${NAMESPACE}" describe deployment frontend || true
          echo "=== events ==="
          kubectl -n "${NAMESPACE}" get events --sort-by=.lastTimestamp | tail -n 200 || true
          echo "=== pods logs/describe ==="
          kubectl -n "${NAMESPACE}" get pods -l app=frontend -o name | while read -r p; do
            kubectl -n "${NAMESPACE}" logs "$p" --previous || true
            kubectl -n "${NAMESPACE}" logs "$p" || true
            kubectl -n "${NAMESPACE}" describe "$p" || true
          done
