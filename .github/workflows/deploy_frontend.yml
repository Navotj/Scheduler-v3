name: Deploy Frontend to EKS

on:
  push:
    branches: ["main"]
    paths:
      - "frontend/**"
      - ".github/workflows/deploy_frontend.yml"
      - "infrastructure/docker/frontend/Dockerfile"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: eu-central-1
      CLUSTER_NAME: nat20-eks

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Resolve ECR URI and SSM parameters (robust)
        id: resolve
        shell: bash
        run: |
          set -euo pipefail

          # --- Try to read ECR URI from SSM; fallback to derive and ensure repo exists ---
          ECR_FRONTEND_URI="$(aws ssm get-parameter --name /nat20/ecr/FRONTEND_URI --query Parameter.Value --output text 2>/dev/null || true)"
          if [ -z "${ECR_FRONTEND_URI}" ] || [ "${ECR_FRONTEND_URI}" = "None" ]; then
            ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
            REPO_NAME="frontend"
            ECR_FRONTEND_URI="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${REPO_NAME}"
            aws ecr describe-repositories --repository-names "${REPO_NAME}" >/dev/null 2>&1 || \
              aws ecr create-repository --repository-name "${REPO_NAME}" >/dev/null
          fi
          echo "ECR_FRONTEND_URI=${ECR_FRONTEND_URI}" >> "$GITHUB_ENV"

          # --- ORIGIN cert + ALB SG (from SSM with strict checks) ---
          ORIGIN_CERT_ARN="$(aws ssm get-parameter --name /nat20/network/ORIGIN_CERT_ARN --query Parameter.Value --output text 2>/dev/null || true)"
          ALB_FRONTEND_SG_ID="$(aws ssm get-parameter --name /nat20/network/ALB_FRONTEND_SG_ID --query Parameter.Value --output text 2>/dev/null || true)"

          if [ -z "${ORIGIN_CERT_ARN}" ] || [ "${ORIGIN_CERT_ARN}" = "None" ]; then
            echo "Missing SSM parameter: /nat20/network/ORIGIN_CERT_ARN" >&2
            exit 1
          fi
          if [ -z "${ALB_FRONTEND_SG_ID}" ] || [ "${ALB_FRONTEND_SG_ID}" = "None" ]; then
            echo "Missing SSM parameter: /nat20/network/ALB_FRONTEND_SG_ID" >&2
            exit 1
          fi

          echo "ORIGIN_CERT_ARN=${ORIGIN_CERT_ARN}" >> "$GITHUB_ENV"
          echo "ALB_FRONTEND_SG_ID=${ALB_FRONTEND_SG_ID}" >> "$GITHUB_ENV"
          echo "ORIGIN_HOST=origin.nat20scheduling.com" >> "$GITHUB_ENV"

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push frontend image
        shell: bash
        run: |
          set -euo pipefail
          docker build -t "${ECR_FRONTEND_URI}:${GITHUB_SHA}" -f infrastructure/docker/frontend/Dockerfile .
          docker push "${ECR_FRONTEND_URI}:${GITHUB_SHA}"
          echo "FRONTEND_IMAGE=${ECR_FRONTEND_URI}:${GITHUB_SHA}" >> "$GITHUB_ENV"

      - name: Update image in k8s manifest
        shell: bash
        run: |
          set -euo pipefail
          sed -i "s#<ECR_URI_REPLACED_BY_CI>/frontend:\${GITHUB_SHA}#${ECR_FRONTEND_URI}:${GITHUB_SHA}#g" infrastructure/k8s/frontend/deployment.yaml

      - name: Render ingress with cert/SG/host
        shell: bash
        run: |
          set -euo pipefail
          ORIGIN_CERT_ARN="${ORIGIN_CERT_ARN}" \
          ALB_FRONTEND_SG_ID="${ALB_FRONTEND_SG_ID}" \
          ORIGIN_HOST="${ORIGIN_HOST}" \
          envsubst < infrastructure/k8s/ingress/frontend-ingress.yaml > /tmp/frontend-ingress.rendered.yaml

      - name: Configure kubectl
        shell: bash
        run: |
          set -euo pipefail
          aws eks update-kubeconfig --name "${CLUSTER_NAME}" --region "${AWS_REGION}"

      - name: Ensure namespace exists
        shell: bash
        run: |
          set -euo pipefail
          kubectl get ns nat20 >/dev/null 2>&1 || kubectl create ns nat20

      - name: Apply frontend and ingress
        shell: bash
        run: |
          set -euo pipefail
          kubectl apply -f infrastructure/k8s/frontend/deployment.yaml
          kubectl apply -f /tmp/frontend-ingress.rendered.yaml
          kubectl rollout status deployment/frontend -n nat20 --timeout=180s || (kubectl -n nat20 describe deploy frontend; kubectl -n nat20 logs deploy/frontend --all-containers --tail=200; exit 1)

      - name: Discover Frontend ALB DNS
        id: alb
        shell: bash
        run: |
          set -euo pipefail
          DNS="$(kubectl -n nat20 get ingress frontend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)"
          if [ -z "${DNS}" ] || [ "${DNS}" = "<no value>" ]; then
            ARN="$(aws elbv2 describe-load-balancers --query "LoadBalancers[?starts_with(LoadBalancerName, 'k8s-')].LoadBalancerArn" --output text | head -n1)"
            if [ -n "${ARN}" ] && [ "${ARN}" != "None" ]; then
              DNS="$(aws elbv2 describe-load-balancers --load-balancer-arns "${ARN}" --query "LoadBalancers[0].DNSName" --output text || true)"
            fi
          fi
          if [ -z "${DNS}" ] || [ "${DNS}" = "None" ]; then
            echo "Could not discover frontend ALB DNS" >&2
            exit 1
          fi
          echo "FRONTEND_ALB_DNS=${DNS}" >> "$GITHUB_ENV"
          echo "frontend_alb_dns=${DNS}" >> "$GITHUB_OUTPUT"
