name: Terraform Deploy

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/deploy_terraform.yml'

defaults:
  run:
    working-directory: infrastructure/terraform

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_PREFIX: ${{ vars.APP_PREFIX }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_PAGER: ""

      TF_VAR_app_prefix: ${{ vars.APP_PREFIX }}
      TF_VAR_root_domain: ${{ vars.ROOT_DOMAIN }}
      TF_VAR_ec2_instance_type: ${{ vars.EC2_INSTANCE_TYPE }}

      DATABASE_USER: ${{ secrets.database_user }}
      DATABASE_PASSWORD: ${{ secrets.database_password }}
      TF_VAR_database_user: ${{ secrets.database_user }}
      TF_VAR_database_password: ${{ secrets.database_password }}

      TF_VAR_serial_console_password: ${{ secrets.SERIAL_CONSOLE_PASSWORD }}

      TF_IN_AUTOMATION: true

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0

      - name: Ensure jq is available
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Terraform Init (S3 backend with native lockfile)
        run: |
          set -euo pipefail
          terraform init \
            -backend-config="bucket=${APP_PREFIX}-state-bucket" \
            -backend-config="key=state/${APP_PREFIX}.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="use_lockfile=true" \
            -backend-config="encrypt=true"

      # ---------------------------
      # Diagnose current CloudFront state (useful logs)
      # ---------------------------
      - name: Diagnose CloudFront presence (by alias and by state)
        shell: bash
        run: |
          set -euo pipefail

          ROOT_DOMAIN="${{ vars.ROOT_DOMAIN }}"
          FRONTEND_HOSTNAME="$(terraform output -raw frontend_hostname 2>/dev/null || true)"
          if [[ -z "${FRONTEND_HOSTNAME}" || "${FRONTEND_HOSTNAME}" == "None" ]]; then
            FRONTEND_HOSTNAME="www.${ROOT_DOMAIN}"
          fi
          echo "Expected alias (frontend_hostname): ${FRONTEND_HOSTNAME}"

          CF_ID_STATE=""
          if terraform state list | grep -q '^aws_cloudfront_distribution.frontend$'; then
            CF_ID_STATE="$(terraform state show aws_cloudfront_distribution.frontend | awk '/^id +=/ {print $3; exit}')"
          fi
          echo "ID in Terraform state (if any): ${CF_ID_STATE:-<none>}"

          CF_ID_ALIAS="$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases && Aliases.Items && contains(Aliases.Items, \`${FRONTEND_HOSTNAME}\`)].Id" --output text 2>/dev/null || true)"
          [[ "${CF_ID_ALIAS}" == "None" ]] && CF_ID_ALIAS=""
          echo "ID found in AWS by alias: ${CF_ID_ALIAS:-<none>}"

      # ---------------------------
      # Heal must run BEFORE planning so a create is planned
      # Heals both cases:
      # 1) State has an ID but AWS no longer has that distribution
      # 2) No distribution exists in AWS for the expected alias
      # ---------------------------
      - name: Heal CloudFront state if deleted or out-of-sync
        shell: bash
        run: |
          set -euo pipefail

          ROOT_DOMAIN="${{ vars.ROOT_DOMAIN }}"
          FRONTEND_HOSTNAME="$(terraform output -raw frontend_hostname 2>/dev/null || true)"
          if [[ -z "${FRONTEND_HOSTNAME}" || "${FRONTEND_HOSTNAME}" == "None" ]]; then
            FRONTEND_HOSTNAME="www.${ROOT_DOMAIN}"
          fi

          CF_ID_STATE=""
          if terraform state list | grep -q '^aws_cloudfront_distribution.frontend$'; then
            CF_ID_STATE="$(terraform state show aws_cloudfront_distribution.frontend | awk '/^id +=/ {print $3; exit}')"
          fi

          CF_ID_ALIAS="$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases && Aliases.Items && contains(Aliases.Items, \`${FRONTEND_HOSTNAME}\`)].Id" --output text 2>/dev/null || true)"
          [[ "${CF_ID_ALIAS}" == "None" ]] && CF_ID_ALIAS=""

          # If state has an ID but AWS does not, drop it from state to force recreate
          if [[ -n "${CF_ID_STATE}" ]]; then
            if ! aws cloudfront get-distribution --id "${CF_ID_STATE}" >/dev/null 2>&1; then
              echo "State references ${CF_ID_STATE} but AWS does not; removing from state."
              terraform state rm aws_cloudfront_distribution.frontend
            fi
          fi

          # If AWS has no distribution for the expected alias, and the resource is NOT in state,
          # Terraform should plan a create. Nothing to remove here; just log it.
          if [[ -z "${CF_ID_ALIAS}" ]]; then
            echo "No existing CloudFront distribution found in AWS for alias ${FRONTEND_HOSTNAME}."
          else
            echo "AWS already has distribution ${CF_ID_ALIAS} for alias ${FRONTEND_HOSTNAME}."
          fi

      - name: Terraform Plan
        run: |
          set -euo pipefail
          terraform plan -lock-timeout=2m -out=tfplan_full

      - name: Terraform Apply
        run: |
          set -euo pipefail
          terraform apply -auto-approve tfplan_full

      - name: Invalidate CloudFront (viewer cache)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          CF_ID="$(terraform output -raw cloudfront_distribution_id 2>/dev/null || true)"
          if [[ -z "${CF_ID}" || "${CF_ID}" == "None" ]]; then
            ROOT_DOMAIN="${{ vars.ROOT_DOMAIN }}"
            FRONTEND_HOSTNAME="$(terraform output -raw frontend_hostname 2>/dev/null || true)"
            if [[ -z "${FRONTEND_HOSTNAME}" || "${FRONTEND_HOSTNAME}" == "None" ]]; then
              FRONTEND_HOSTNAME="www.${ROOT_DOMAIN}"
            fi
            CF_ID="$(
              aws cloudfront list-distributions \
                --query "DistributionList.Items[?Aliases && Aliases.Items && contains(Aliases.Items, \`${FRONTEND_HOSTNAME}\`)].Id" \
                --output text 2>/dev/null || true
            )"
            [[ "${CF_ID}" == "None" ]] && CF_ID=""
          fi

          if [[ -z "${CF_ID}" ]]; then
            echo "Could not resolve CloudFront distribution ID; skipping invalidation."
            exit 0
          fi

          echo "Invalidating CloudFront cache for distribution ${CF_ID}"
          aws cloudfront create-invalidation --distribution-id "${CF_ID}" --paths "/*" >/dev/null
          echo "Invalidation submitted."

      - name: Force-unlock Terraform state if needed
        if: ${{ always() }}
        run: |
          set -euo pipefail
          if [[ -f .terraform.tfstate.lock.info ]]; then
            LOCK_ID="$(jq -r '.ID' .terraform.tfstate.lock.info || true)"
            if [[ -n "${LOCK_ID}" && "${LOCK_ID}" != "null" ]]; then
              terraform force-unlock -force "${LOCK_ID}" || true
            fi
          fi
