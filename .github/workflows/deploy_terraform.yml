name: Terraform Deploy

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/deploy_terraform.yml'

defaults:
  run:
    working-directory: infrastructure/terraform

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_PREFIX: ${{ vars.APP_PREFIX }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      TF_VAR_app_prefix: ${{ vars.APP_PREFIX }}
      TF_VAR_root_domain: ${{ vars.ROOT_DOMAIN }}
      TF_VAR_ec2_instance_type: ${{ vars.EC2_INSTANCE_TYPE }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0

      - name: Ensure jq is available
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Terraform Init (S3 backend with native lockfile)
        run: |
          set -euo pipefail
          terraform init \
            -backend-config="bucket=${APP_PREFIX}-state-bucket" \
            -backend-config="key=state/${APP_PREFIX}.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="use_lockfile=true" \
            -backend-config="encrypt=true"

      # Heal must run before plan so the plan includes the (re)create
      - name: Heal CloudFront state if deleted manually
        shell: bash
        run: |
          set -euo pipefail
          if terraform state list | grep -q '^aws_cloudfront_distribution.frontend$'; then
            CF_ID="$(terraform state show aws_cloudfront_distribution.frontend | awk '/^id +=/ {print $3; exit}')"
            if [[ -n "${CF_ID:-}" ]] && ! aws cloudfront get-distribution --id "${CF_ID}" >/dev/null 2>&1; then
              echo "CloudFront ${CF_ID} missing in AWS; removing from state."
              terraform state rm aws_cloudfront_distribution.frontend
            fi
          fi

      - name: Terraform Plan
        run: |
          set -euo pipefail
          terraform plan -lock-timeout=2m -out=tfplan_full

      - name: Terraform Apply
        run: |
          set -euo pipefail
          terraform apply -auto-approve tfplan_full

      - name: Invalidate CloudFront (viewer cache)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          # Prefer Terraform output (authoritative) and avoid depending on Comment strings.
          CF_ID="$(terraform output -raw cloudfront_distribution_id 2>/dev/null || true)"
          if [[ -z "${CF_ID}" || "${CF_ID}" == "None" ]]; then
            FRONTEND_HOSTNAME="$(terraform output -raw frontend_hostname 2>/dev/null || true)"
            if [[ -n "${FRONTEND_HOSTNAME}" && "${FRONTEND_HOSTNAME}" != "None" ]]; then
              CF_ID="$(
                aws cloudfront list-distributions \
                  --query "DistributionList.Items[?Aliases && Aliases.Items && contains(Aliases.Items, \`${FRONTEND_HOSTNAME}\`)].Id" \
                  --output text 2>/dev/null || true
              )"
            fi
          fi

          if [[ -z "${CF_ID}" || "${CF_ID}" == "None" ]]; then
            echo "Could not resolve CloudFront distribution ID; skipping invalidation."
            exit 0
          fi

          echo "Invalidating CloudFront cache for distribution ${CF_ID}"
          aws cloudfront create-invalidation --distribution-id "${CF_ID}" --paths "/*" >/dev/null
          echo "Invalidation submitted."

      - name: Force-unlock Terraform state if needed
        if: ${{ always() }}
        run: |
          set -euo pipefail
          if [[ -f .terraform.tfstate.lock.info ]]; then
            LOCK_ID="$(jq -r '.ID' .terraform.tfstate.lock.info || true)"
            if [[ -n "${LOCK_ID}" && "${LOCK_ID}" != "null" ]]; then
              terraform force-unlock -force "${LOCK_ID}" || true
            fi
          fi
