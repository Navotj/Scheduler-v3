name: 'Deploy Terraform Infrastructure'

on:
  push:
    branches: [ "main" ]
    paths:
      - 'infrastructure/terraform/**'
      - ".github/workflows/deploy_terraform.yml"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: infrastructure/terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    # Bootstrap remote state backend if missing (S3 bucket + DynamoDB table)
    - name: Ensure remote state backend exists
      run: |
        set -euo pipefail

        BUCKET="navot-terraform-state-1"
        REGION="eu-central-1"
        DDB_TABLE="terraform-lock-table"

        if ! aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
          echo "Creating S3 bucket: $BUCKET in $REGION"
          aws s3api create-bucket --bucket "$BUCKET" --region "$REGION" --create-bucket-configuration LocationConstraint="$REGION"
          aws s3api put-bucket-versioning --bucket "$BUCKET" --versioning-configuration Status=Enabled
          aws s3api put-bucket-encryption --bucket "$BUCKET" --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
          aws s3api put-public-access-block --bucket "$BUCKET" --public-access-block-configuration '{
            "BlockPublicAcls": true,
            "IgnorePublicAcls": true,
            "BlockPublicPolicy": true,
            "RestrictPublicBuckets": true
          }'
        else
          echo "S3 bucket $BUCKET already exists"
        fi

        if ! aws dynamodb describe-table --table-name "$DDB_TABLE" >/dev/null 2>&1; then
          echo "Creating DynamoDB table: $DDB_TABLE"
          aws dynamodb create-table \
            --table-name "$DDB_TABLE" \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST
          aws dynamodb wait table-exists --table-name "$DDB_TABLE"
        else
          echo "DynamoDB table $DDB_TABLE already exists"
        fi

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -input=false

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve -input=false
