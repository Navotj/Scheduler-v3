name: Terraform Deploy

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/deploy_terraform.yml'

defaults:
  run:
    working-directory: infrastructure/terraform

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_PREFIX: ${{ vars.APP_PREFIX }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_PAGER: ""

      TF_VAR_app_prefix: ${{ vars.APP_PREFIX }}
      TF_VAR_root_domain: ${{ vars.ROOT_DOMAIN }}
      TF_VAR_ec2_instance_type: ${{ vars.EC2_INSTANCE_TYPE }}

      DATABASE_USER: ${{ secrets.database_user }}
      DATABASE_PASSWORD: ${{ secrets.database_password }}
      TF_VAR_database_user: ${{ secrets.database_user }}
      TF_VAR_database_password: ${{ secrets.database_password }}
      TF_VAR_database_host: ${{ vars.DATABASE_HOST }}
      
      TF_IN_AUTOMATION: true

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0

      - name: Ensure jq is available
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Terraform Init (S3 backend with native lockfile)
        run: |
          set -euo pipefail
          terraform init \
            -backend-config="bucket=${APP_PREFIX}-state-bucket" \
            -backend-config="key=state/${APP_PREFIX}.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="use_lockfile=true" \
            -backend-config="encrypt=true"

      - name: Terraform Plan
        run: |
          set -euo pipefail
          terraform plan -lock-timeout=2m -out=tfplan_full

      - name: Terraform Apply
        run: |
          set -euo pipefail
          terraform apply -auto-approve tfplan_full

      - name: Fetch EC2 console logs
        if: always()
        run: |
          set -euo pipefail

          DB_ID="$(terraform output -raw database_instance_id 2>/dev/null || true)"
          BE_ID="$(terraform output -raw backend_instance_id 2>/dev/null || true)"

          fetch_logs () {
            local id="$1"
            echo "===== Console log for ${id} ====="
            # Use --latest; avoid piping to grep to prevent BrokenPipeError from awscli (Python).
            local out
            out="$(aws ec2 get-console-output \
              --region "${AWS_REGION}" \
              --instance-id "${id}" \
              --latest \
              --query 'Output' \
              --output text 2>/dev/null || true)"
            if [[ -n "${out}" && "${out}" != "None" ]]; then
              printf '%s\n' "${out}"
              return 0
            fi
            return 1
          }

          for ID in $DB_ID $BE_ID; do
            if [[ -n "${ID}" && "${ID}" != "None" ]]; then
              # Retry because the console buffer can lag a bit after boot
              attempt=1
              until fetch_logs "${ID}" || (( attempt >= 8 )); do
                sleep 8
                ((attempt++))
              done
              if (( attempt >= 8 )); then
                echo "No console output available yet for ${ID}."
              fi
            fi
          done

      - name: Force-unlock Terraform state if needed
        if: ${{ always() }}
        run: |
          set -euo pipefail
          if [[ -f .terraform.tfstate.lock.info ]]; then
            LOCK_ID="$(jq -r '.ID' .terraform.tfstate.lock.info || true)"
            if [[ -n "${LOCK_ID}" && "${LOCK_ID}" != "null" ]]; then
              terraform force-unlock -force "${LOCK_ID}" || true
            fi
          fi
