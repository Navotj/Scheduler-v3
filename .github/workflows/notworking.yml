name: literally just throwing shit im not using here
on:
  workflow_dispatch: {}

defaults:
  run:
    working-directory: infrastructure/terraform

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_PREFIX: ${{ vars.APP_PREFIX }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_PAGER: ""

      TF_VAR_app_prefix: ${{ vars.APP_PREFIX }}
      TF_VAR_root_domain: ${{ vars.ROOT_DOMAIN }}
      TF_VAR_ec2_instance_type: ${{ vars.EC2_INSTANCE_TYPE }}

      DATABASE_USER: ${{ secrets.database_user }}
      DATABASE_PASSWORD: ${{ secrets.database_password }}
      TF_VAR_database_user: ${{ secrets.database_user }}
      TF_VAR_database_password: ${{ secrets.database_password }}
      TF_VAR_database_host: ${{ vars.DATABASE_HOST }}

      TF_IN_AUTOMATION: true
    steps:
              # ---------------------------
      # Diagnose current CloudFront state (useful logs)
      # ---------------------------
      - name: Diagnose CloudFront presence (by alias and by state)
        shell: bash
        run: |
          set -euo pipefail

          ROOT_DOMAIN="${{ vars.ROOT_DOMAIN }}"
          FRONTEND_HOSTNAME="$(terraform output -raw frontend_hostname 2>/dev/null || true)"
          if [[ -z "${FRONTEND_HOSTNAME}" || "${FRONTEND_HOSTNAME}" == "None" ]]; then
            FRONTEND_HOSTNAME="www.${ROOT_DOMAIN}"
          fi
          echo "Expected alias (frontend_hostname): ${FRONTEND_HOSTNAME}"

          CF_ID_STATE=""
          if terraform state list | grep -q '^aws_cloudfront_distribution.frontend$'; then
            CF_ID_STATE="$(terraform state show aws_cloudfront_distribution.frontend | awk '/^id +=/ {print $3; exit}')"
          fi
          echo "ID in Terraform state (if any): ${CF_ID_STATE:-<none>}"

          CF_ID_ALIAS="$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases && Aliases.Items && contains(Aliases.Items, \`${FRONTEND_HOSTNAME}\`)].Id" --output text 2>/dev/null || true)"
          [[ "${CF_ID_ALIAS}" == "None" ]] && CF_ID_ALIAS=""
          echo "ID found in AWS by alias: ${CF_ID_ALIAS:-<none>}"

      # ---------------------------
      # Heal must run BEFORE planning so a create is planned
      # Heals both cases:
      # 1) State has an ID but AWS no longer has that distribution
      # 2) No distribution exists in AWS for the expected alias
      # ---------------------------
      - name: Heal CloudFront state if deleted or out-of-sync
        shell: bash
        run: |
          set -euo pipefail

          ROOT_DOMAIN="${{ vars.ROOT_DOMAIN }}"
          FRONTEND_HOSTNAME="$(terraform output -raw frontend_hostname 2>/dev/null || true)"
          if [[ -z "${FRONTEND_HOSTNAME}" || "${FRONTEND_HOSTNAME}" == "None" ]]; then
            FRONTEND_HOSTNAME="www.${ROOT_DOMAIN}"
          fi

          CF_ID_STATE=""
          if terraform state list | grep -q '^aws_cloudfront_distribution.frontend$'; then
            CF_ID_STATE="$(terraform state show aws_cloudfront_distribution.frontend | awk '/^id +=/ {print $3; exit}')"
          fi

          CF_ID_ALIAS="$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases && Aliases.Items && contains(Aliases.Items, \`${FRONTEND_HOSTNAME}\`)].Id" --output text 2>/dev/null || true)"
          [[ "${CF_ID_ALIAS}" == "None" ]] && CF_ID_ALIAS=""

          # If state has an ID but AWS does not, drop it from state to force recreate
          if [[ -n "${CF_ID_STATE}" ]]; then
            if ! aws cloudfront get-distribution --id "${CF_ID_STATE}" >/dev/null 2>&1; then
              echo "State references ${CF_ID_STATE} but AWS does not; removing from state."
              terraform state rm aws_cloudfront_distribution.frontend
            fi
          fi

          # If AWS has no distribution for the expected alias, and the resource is NOT in state,
          # Terraform should plan a create. Nothing to remove here; just log it.
          if [[ -z "${CF_ID_ALIAS}" ]]; then
            echo "No existing CloudFront distribution found in AWS for alias ${FRONTEND_HOSTNAME}."
          else
            echo "AWS already has distribution ${CF_ID_ALIAS} for alias ${FRONTEND_HOSTNAME}."
          fi

      - name: Fetch EC2 console logs
        if: always()
        run: |
          set -euo pipefail

          DB_ID="$(terraform output -raw database_instance_id 2>/dev/null || true)"
          BE_ID="$(terraform output -raw backend_instance_id 2>/dev/null || true)"

          fetch_logs () {
            local id="$1"
            echo "===== Console log for ${id} ====="
            # Use --latest; avoid piping to grep to prevent BrokenPipeError from awscli (Python).
            local out
            out="$(aws ec2 get-console-output \
              --region "${AWS_REGION}" \
              --instance-id "${id}" \
              --latest \
              --query 'Output' \
              --output text 2>/dev/null || true)"
            if [[ -n "${out}" && "${out}" != "None" ]]; then
              printf '%s\n' "${out}"
              return 0
            fi
            return 1
          }

          for ID in $DB_ID $BE_ID; do
            if [[ -n "${ID}" && "${ID}" != "None" ]]; then
              # Retry because the console buffer can lag a bit after boot
              attempt=1
              until fetch_logs "${ID}" || (( attempt >= 8 )); do
                sleep 8
                ((attempt++))
              done
              if (( attempt >= 8 )); then
                echo "No console output available yet for ${ID}."
              fi
            fi
          done

      - name: Fetch EC2 console logs
        if: always()
        run: |
          set -euo pipefail

          DB_ID="$(terraform output -raw database_instance_id 2>/dev/null || true)"
          BE_ID="$(terraform output -raw backend_instance_id 2>/dev/null || true)"

          fetch_logs () {
            local id="$1"
            echo "===== Console log for ${id} ====="
            # Use --latest; avoid piping to grep to prevent BrokenPipeError from awscli (Python).
            local out
            out="$(aws ec2 get-console-output \
              --region "${AWS_REGION}" \
              --instance-id "${id}" \
              --latest \
              --query 'Output' \
              --output text 2>/dev/null || true)"
            if [[ -n "${out}" && "${out}" != "None" ]]; then
              printf '%s\n' "${out}"
              return 0
            fi
            return 1
          }

          for ID in $DB_ID $BE_ID; do
            if [[ -n "${ID}" && "${ID}" != "None" ]]; then
              # Retry because the console buffer can lag a bit after boot
              attempt=1
              until fetch_logs "${ID}" || (( attempt >= 8 )); do
                sleep 8
                ((attempt++))
              done
              if (( attempt >= 8 )); then
                echo "No console output available yet for ${ID}."
              fi
            fi
          done
