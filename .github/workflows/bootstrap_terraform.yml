name: Deploy Terraform

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/deploy_terraform.yml'

defaults:
  run:
    working-directory: infrastructure/terraform

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-terraform
      cancel-in-progress: false
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_app_prefix: ${{ vars.APP_PREFIX }}
      TF_VAR_root_domain: ${{ vars.ROOT_DOMAIN }}
      TF_VAR_ec2_instance_type: ${{ vars.EC2_INSTANCE_TYPE }}

    steps:
      - uses: actions/checkout@v5

      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.13.0 }

      - name: Terraform Init (remote state)
        run: terraform init -input=false

      - name: Heal CloudFront state if deleted manually
        shell: bash
        run: |
          set -euo pipefail
          if terraform state list | grep -q '^aws_cloudfront_distribution.frontend$'; then
            CF_ID="$(terraform state show aws_cloudfront_distribution.frontend | awk '/^id +=/ {print $3; exit}')"
            if [[ -n "${CF_ID:-}" ]] && ! aws cloudfront get-distribution --id "${CF_ID}" >/dev/null 2>&1; then
              echo "CloudFront ${CF_ID} missing in AWS; removing from state."
              terraform state rm aws_cloudfront_distribution.frontend
            fi
          fi

      - name: Plan
        run: terraform plan -input=false -out=tfplan_full

      - name: Apply
        run: terraform apply -input=false -auto-approve tfplan_full
